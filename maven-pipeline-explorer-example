def executeScript(stageName) {
    executeScript(stageName, 20)
}

def executeScript(stageName, iterations) {
    for (int i = 1; i <= iterations; ++i) {
        echo "This is branch ${stageName} => ${i}/${iterations}"
        sh '''
            #!/bin/bash
            #sleep "$(( RANDOM % 10 ))"
            #sleep 1
        '''
    }
}

pipeline {
    agent any
    environment {
        MAX = 1
    }
    stages {
        stage('Build') {
            steps {
                // Get some code from a GitHub repository
                git 'https://github.com/jgreffe/simple-maven-project-with-tests.git'

                // Run Maven on a Unix agent.
                sh "mvn -X -Dstyle.color=always -Dfaker.count=$MAX -Dfaker.sleepMin=1 -Dfaker.sleepMax=10 -Dmaven.test.failure.ignore=true clean package"

                // To run Maven on a Windows agent, use
                // bat "mvn -Dmaven.test.failure.ignore=true clean package"
            }

            post {
                // If Maven was able to run the tests, even if some of the test
                // failed, record the test results and archive the jar file.
                success {
                    junit '**/target/surefire-reports/TEST-*.xml'
                    archiveArtifacts 'target/*.jar'
                }
            }
        }

        stage('Parallel Stage') {
            failFast true
            parallel (
                "Branch A": {
                    executeScript('Branch A')
                },
                "Branch B": {
                    executeScript('Nested B1 within Branch B')
                    executeScript('Nested B2 within Branch B')
                },
                "Branch C": {
                    executeScript('Nested C1 within Branch C')
                    executeScript('Nested C21 within Branch C')
                    executeScript('Nested C22 within Branch C')
                }
            )
        }
    }
}
